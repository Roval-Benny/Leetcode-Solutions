# Solution Roval T:O(V+E) S:O(E)
# 28-09-2022

class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        def dfs(r,c):
            if r<0 or c<0 or r==len(grid) or c==len(grid[0]) or grid[r][c] == 0:
                return 1
            if grid[r][c]==2:
                return 0
            grid[r][c] = 2
            return dfs(r-1,c) + dfs(r+1,c) + dfs(r,c+1) + dfs(r,c-1) 
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]:
                    return dfs(r,c)


# T:O(NM) S:O(NM) Number of ones
# DFS
class Solution:
    def starter(self,grid):
        for row in range(len(grid)):
            for col in range(len(grid[row])):
                if grid[row][col] == 1:
                    grid[row][col] = 2
                    return (row,col)
                
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        stack = []
        stack.append(self.starter(grid))
        perimeter = 0
        
        def checker(row,col):
            if col >=0 and row >=0  and row <len(grid) and col<len(grid[row]) and grid[row][col]!=0:
                if grid[row][col]==1:
                    stack.append((row,col))
                    grid[row][col] = 2
                return 1
            return 0
        
        while stack:
            value = stack.pop(-1)
            tp = 4
            tp-= checker(value[0]-1,value[1])
            tp-= checker(value[0]+1,value[1])
            tp-= checker(value[0],value[1]-1)
            tp-= checker(value[0],value[1]+1)
            perimeter+=tp
            #grid[value[0]][value[1]] = 2
        return perimeter