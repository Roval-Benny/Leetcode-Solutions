# Solution Roval T:O(2^N) S:O(2^N)
# 05-10-2022

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        arr = [[]]
        ans = set()
        nums.sort()
        ans.add(tuple([]))
        for i in nums:
            for j in range(len(arr)):
                arr.append(arr[j]+[i])
                ans.add(tuple(arr[-1]))
        return ans


# T:O(2^N) S:O(2^N)
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        ans = []
        def subset(arr,temp):
            ans.append(temp.copy())
            for i in range(len(arr)):
                if i and arr[i]==arr[i-1]:
                    continue
                subset(arr[i+1:],temp+[arr[i]])
        subset(nums,[])
        return ans