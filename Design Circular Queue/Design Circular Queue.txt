class Node:
    def __init__(self,val):
        self.val = val
        self.next = None

class MyCircularQueue:

    def __init__(self, k: int):
        self.front = None
        self.rear = None
        self.maxsize = k
        self.csize = 0

    def enQueue(self, value: int) -> bool:
        if self.csize==self.maxsize:
            return False
        node = Node(value)
        if self.front==None:
            self.front = node
            self.rear = node
        else:
            self.rear.next = node
            self.rear = self.rear.next
        self.csize+=1
        return True

    def deQueue(self) -> bool:
        if self.csize==0:
            return False
        self.front = self.front.next
        self.csize-=1
        return True

    def Front(self) -> int:
        if self.csize==0:
            return -1
        if self.front.val==-1:
            return self.front.next.val
        return self.front.val

    def Rear(self) -> int:
        if self.csize==0:
            return -1
        return self.rear.val

    def isEmpty(self) -> bool:
        return self.csize==0

    def isFull(self) -> bool:
        return self.maxsize==self.csize

# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()