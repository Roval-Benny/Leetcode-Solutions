# Solution Roval T:O(N) S:O(1)
# 07-09-2022

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        for i in range(len(nums)):
            while nums[i]>0 and nums[i]<=len(nums) and nums[i]!=(i+1) and nums[i]!=nums[nums[i]-1]:
                temp = nums[i]
                nums[i] = nums[nums[i]-1]
                nums[temp-1] = temp
        for index,val in enumerate(nums):
            if index+1!=val:
                return index+1
        return len(nums)+1

# Solution Roval T:O(N) S:O(1)
# 18-08-2022

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        for i in range(len(nums)):
            while nums[i]>0 and nums[i]<=len(nums) and nums[i]!=nums[nums[i]-1] and nums[i]!=(i+1):
                temp = nums[nums[i]-1]
                nums[nums[i]-1] = nums[i]
                nums[i] = temp
        count = 1
        for i in nums:
            if i<=0:
                continue
            if i==count:
                count+=1
                continue
            return count
        maxV = max(nums)+1
        return maxV if maxV>0 else 1

#T:O(N) S:O(1)
class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        index = 0
        while index<len(nums):
            if nums[index]>0 and nums[index]<=len(nums) and nums[index]!=index+1 and nums[index]!=nums[nums[index]-1]:
                nums[nums[index]-1], nums[index] = nums[index], nums[nums[index]-1]
            else:
                index+=1
        for i in range(len(nums)):
            if (i+1)!=nums[i]:
                return i+1
        return len(nums)+1