# Solution Roval T:O(N^2 + NlogN) S:O(N)
# 23-08-2022

from heapq import heapify,heappop, heappush
class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        visited = set()
        cost = 0
        heap = [(0,points[0][0],points[0][1])]
        heapify(heap)
        while heap and len(visited)!=len(points):
            wt,x1,y1 = heappop(heap)
            if (x1,y1) not in visited:
                visited.add((x1,y1))
                cost+=wt
                for x2,y2 in points:
                    if (x2,y2) not in visited:
                        heappush(heap,(abs(x2-x1)+abs(y2-y1),x2,y2))
        return cost


# Solution Royal T:(N^2 + NlogN) S:O(N)
# 23-08-2022

#T: O(N^2logN) S: O(N^2)
from heapq import heappop,heappush
class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        def distance(a,b):
            return abs(a[0]-b[0])+abs(a[1]-b[1])
        totalCost = 0
        points = [tuple(point) for point in points]
        visited = set()
        heap = [(0,points[0])]
        def addToHeap(source):
            for point in points:
                if point in visited:
                    continue
                heappush(heap,(distance(source,point),point))
        while len(visited)!= len(points):
            cost,point = heappop(heap)
            if point in visited:
                continue
            visited.add(point)
            addToHeap(point)
            totalCost+=cost
        return totalCost