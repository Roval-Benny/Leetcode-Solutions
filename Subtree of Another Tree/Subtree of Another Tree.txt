# Definition for a binary tree node.
# Time:O(N) S:(D) D-depth
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    
    def __init__(self):
        self.roots = []
    def rootFinder(self,node,root):
        if not node:
            return None
        if node.val == root.val:
            self.roots.append(node)
        self.rootFinder(node.left,root)
        self.rootFinder(node.right,root)
        
    def subTree(self,root1,root2):
        if not root1 and not root2:
            return True
        if root1 and root2 and root1.val == root2.val:
            return self.subTree(root1.left,root2.left) and self.subTree(root1.right,root2.right)
        return False
    
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        self.rootFinder(root,subRoot)
        if self.roots:
            for i in self.roots:
                if self.subTree(i,subRoot):
                    return True
        return False