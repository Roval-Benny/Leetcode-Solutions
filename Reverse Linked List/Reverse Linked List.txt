# Solution 1 using iteration T:O(N) S:O(1)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None
        prev = head
        head = head.next
        prev.next = None
        while head:
            t = head
            head = head.next
            t.next = prev
            prev = t
        return prev

# Solution 2 using recursion T:O(N) S:O(N)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def __init__(self):
        self.head = None
        
    def recursion(self,node):
        if not node.next:
            self.head = node
            return node
        a = self.recursion(node.next)
        a.next = node
        node.next = None
        return node
    
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None
        self.recursion(head)
        return self.head