# Solution Roval T:O(9*9) S:O(9*9)
# 23-11-2022

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        row,col,box = set(),set(),set()
        for i in range(9):
            for j in range(9):
                if board[i][j]=='.':
                    continue
                val = board[i][j]
                if (i,val) in row or (j,val) in col or (i//3,j//3,val) in box:
                    return False
                row.add((i,val))
                col.add((j,val))
                box.add((i//3,j//3,val))
        return True

# Solution Roval T:O(9*9) S:O(9)
# 06-09-2022

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        def validateBox(row,col):
            val = set()
            for i in range(row,row+3):
                for j in range(col,col+3):
                    if board[i][j]=='.':
                        continue
                    if board[i][j] in val:
                        return False
                    val.add(board[i][j])
            return True
        row = set()
        col = set()
        for i in range(9):
            for j in range(9):
                if board[i][j]!='.' and board[i][j] in row:
                    return False
                elif board[i][j]!='.':
                    row.add(board[i][j])
                if board[j][i]!='.' and board[j][i] in col:
                    return False
                elif board[j][i]!='.':
                    col.add(board[j][i])
            row.clear()
            col.clear()
        
        for row in range(0,9,3):
            for col in range(0,9,3):
                if not validateBox(row,col):
                    return False
        return True