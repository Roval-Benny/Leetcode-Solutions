# Solution - 1 - Roval T:O(1) S:O(size(cache))
class Node:
    def __init__(self,key,val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
        
class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.LRU = {}
        self.head = Node(-1,-1)
        self.tail = Node(-1,-1)
        self.head.next = self.tail
        self.tail.prev = self.head
        
        
    def get(self, key: int) -> int:
        if key in self.LRU:
            node = self.LRU[key]
            self.remove(node)
            self.add(node)
            return node.val
        return -1
    
    def put(self, key: int, value: int) -> None:
        if key in self.LRU:
            node = self.LRU[key]
            self.remove(node)
            self.add(node)
            node.val = value
            self.LRU[key] = node
        else:
            if len(self.LRU) == self.capacity:
                node = self.head.next
                self.LRU.pop(node.key,None)
                self.remove(node)
            node = Node(key,value)
            self.add(node)
            self.LRU[key] = node
                
    def remove(self,node):
        prev = node.prev
        next = node.next
        prev.next = next
        next.prev = prev
        
    def add(self,node):
        prev = self.tail.prev
        node.next = self.tail
        node.prev = prev
        prev.next = node
        self.tail.prev = node



# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)