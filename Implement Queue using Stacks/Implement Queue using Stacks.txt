'''All operations take **O(1)**  
Time complexity except when stack2 is empty. If stack2 is empty the **O(N)** 
is required to fill the stack2'''
class MyQueue:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []
        self.count = -1
        self.flag = False
        
    def reverse(self):
        self.flag = True
        for i in range(len(self.stack1)-1,self.count,-1):
            self.stack2.append(self.stack1[i])
            
    def push(self, x: int) -> None:
        self.flag = False
        self.stack1.append(x)

    def pop(self) -> int:
        if self.empty():
            return -1
        if not self.stack2:
            self.reverse()
        self.count+=1
        return self.stack2.pop(-1)

    def peek(self) -> int:
        if self.empty():
            return -1
        if not self.stack2:
            self.reverse()
        return self.stack2[-1]

    def empty(self) -> bool:
        if self.count<len(self.stack1)-1:
            return False
        return True


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()