# Solution 1 - Roval T:O(size(word)) S:O(depth of trie)
from collections import defaultdict
class Node:
    
    def __init__(self):
        self.children = defaultdict(list)
        self.isPresent = False
        
class Trie:

    def __init__(self):
        self.node = Node()

    def insert(self, word: str) -> None:
        node = self.node
        for ch in word:
            if ch in node.children:
                node = node.children[ch]
            else:
                temp = Node()
                node.children[ch] = temp
                node = temp
        node.isPresent = True
            

    def search(self, word: str) -> bool:
        node = self.node
        for ch in word:
            if ch in node.children:
                node = node.children[ch]
            else:
                return False
        return node.isPresent

    def startsWith(self, prefix: str) -> bool:
        node = self.node
        for ch in prefix:
            if ch not in node.children:
                return False
            node = node.children[ch]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)