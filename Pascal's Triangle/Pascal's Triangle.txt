# T:O(N^2) S:O(N^2)
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        count = 1
        output = [[1]]
        while count < numRows:
            output.append([1])
            for i in range(len(output[-2])-1):
                output[-1].append(output[-2][i]+output[-2][i+1])
            output[-1].append(1)
            count+=1
        return output

# T:O(N^2) S:O(N^2)
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        ans = []
        def pascal(n):
            if n==1:
                ans.append([1])
                return [0,1,0]
            op = pascal(n-1)
            temp = []
            for i in range(len(op)-1):
                temp.append(op[i]+op[i+1])
            ans.append(temp)
            return [0]+temp+[0]
        pascal(numRows)
        return ans