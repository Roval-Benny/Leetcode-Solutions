# Solution Roval
# 07-11-2022

class TrieNode:
    def __init__(self):
        self.children = {}
        self.isword = False
    
    def addWord(self,word):
        curr = self
        for c in word:
            if c not in curr.children:
                curr.children[c] = TrieNode()
            curr = curr.children[c]
        curr.isword = True

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = TrieNode()
        for word in words:
            root.addWord(word)
        
        ROWS,COLS = len(board),len(board[0])
        res = set()
        
        def dfs(r,c,node,word):
            if r<0 or c<0 or r == ROWS or c == COLS or board[r][c] not in node.children:
                return 
            word+=board[r][c]
            t = board[r][c]
            node = node.children[board[r][c]]
            board[r][c] = '*'
            if node.isword:
                res.add(word)
            dfs(r-1,c,node,word)
            dfs(r+1,c,node,word)
            dfs(r,c-1,node,word)
            dfs(r,c+1,node,word)
            board[r][c] = t
            return 
        for r in range(ROWS):
            for c in range(COLS):
                dfs(r,c,root,"")
                if len(res)>=len(words):
                    return res
        return res