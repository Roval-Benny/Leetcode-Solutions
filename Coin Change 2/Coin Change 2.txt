# Solution 1 - Roval T:O(N*M) S:O(N)
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0]*(amount+1)
        dp[0] = 1
        for coin in coins:
            for i in range(coin,amount+1):
                dp[i] = dp[i]+dp[i-coin]
        return dp[-1]

# T:O(N*M) S:O(N) N- amount M- coin count

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        count = [0]*(amount+1)
        coins.sort()
        count[0] = 1
        for coin in coins:
            for i in range(coin,amount+1):
                count[i] = count[i]+count[i-coin]
        return count[-1]