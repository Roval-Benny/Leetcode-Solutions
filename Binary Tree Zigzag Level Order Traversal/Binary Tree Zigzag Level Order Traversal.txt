# Solution Roval T:O(N) S:O(N)
# 30-08-2022

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return
        nodes = [root]
        clock = True
        ans = [[root.val]]
        while nodes:
            temp = []
            tans = []
            i = 0
            while i<len(nodes):
                if nodes[i].right:
                    temp.append(nodes[i].right)
                    tans.append(nodes[i].right.val)
                if nodes[i].left:
                    temp.append(nodes[i].left)
                    tans.append(nodes[i].left.val)
                i+=1
            ans.append(tans if clock else tans[::-1])
            nodes = temp
            clock = not clock
        ans.pop(-1)
        return and




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from queue import Queue
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        q = Queue()
        q.put(root)
        ans = []
        flag=True
        while(not q.empty()):
            temp = []
            temp_ans = []
            while(not q.empty()):
                t = q.get()
                if t.left:
                    temp.append(t.left)
                if t.right:
                    temp.append(t.right)
                temp_ans.append(t.val)
            for i in temp:
                q.put(i)
            if flag:
                ans.append(temp_ans)
            else:
                ans.append(temp_ans[::-1])
            flag = not flag
        return ans