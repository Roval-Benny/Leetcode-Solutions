# Solution Roval T:O(NlogN) S:O(N)
# 04-09-2022

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        nodes = [] 
        def dfs(node,row,col):
            if not node:
                return 
            nodes.append((row,col,node.val))
            dfs(node.left,row+1,col-1)
            dfs(node.right,row+1,col+1)
            return 
        dfs(root,0,0)
        nodes.sort(key=lambda x:(x[1],x[0],x[2]))
        ans = []
        for index,val in enumerate(nodes):
            if index>0 and val[1]==nodes[index-1][1]:
                ans[-1].append(val[2])
            else:
                ans.append([val[2]])
        return ans