# T:O(N) S:O(D) D- depth

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.binary = True
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        self.heighter(root)
        return self.binary
    
    def heighter(self,root,height=0):
        if not root:
            return height-1
        a = self.heighter(root.left,height+1)
        b = self.heighter(root.right,height+1)
        
        if(abs(a-b)>1):
            self.binary = False
        return max(a,b)