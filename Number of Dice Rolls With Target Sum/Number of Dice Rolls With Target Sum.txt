# Solution Roval T:O(N*K) S:O(N*K)
# 03-10-2022

class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        memo = {}
        def backtrack(pos,total):
            if pos==n:
                return int(total==target)
            if total>target:
                return 0
            if (pos,total) in memo:
                return memo[(pos,total)]
            count = 0
            for i in range(1,k+1):
                count+= backtrack(pos+1,total+i)
            memo[(pos,total)] = count
            return count
        return backtrack(0,0)%(10**9 + 7)


# 02-10-2022

class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        mxn = 10**9 + 7
        dp=[[0 for i in range(target+1)] for j in range(n+1)]
        dp[0][0]=1
        for i in range(n+1):
            for sm in range(1,target+1):           
                if sm>k:
                    dp[i][sm]=(dp[i][sm] + dp[i-1][sm-1]-dp[i-1][sm-k-1])%mxn
                else:
                    dp[i][sm]=(dp[i][sm] + dp[i-1][sm-1])%mxn
                
                dp[i][sm]=(dp[i][sm]+dp[i][sm-1])%mxn
                
        return (dp[n][target]-dp[n][target-1])%mxn