# Solution Roval T:(N) S:O(N)
# 25-10-2022

from heapq import heapify,heappop,heappush
class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        l = r = 0
        heap = []
        heapify(heap)
        ans = 0
        minv = nums[0]
        while r<len(nums):
            if abs(minv-nums[r])<=limit:
                minv = min(minv,nums[r])
                heappush(heap,(nums[r],r))
                r+=1
            else:
                print(heap)
                ans = max(ans,r-1-l)
                tl = l
                while heap and (heap[0][1]<tl or abs(heap[0][0]-nums[r])>limit):
                    val,index = heappop(heap)
                    tl = min(tl,index)
                while l<tl and abs(nums[tl]-nums[r])>limit:
                    l+=1
                print(heap)
                if l>=r:
                    r+=1
        return max(ans,r-1-l)