# Solution Roval T:O(N^2) S:O(N^2)
# 01-10-2022

class Solution:
    def numDecodings(self, s: str) -> int:
        chars = set( str(i) for i in range(1,27))
        memo = {}
        def backtrack(pos):
            if pos in memo:
                return memo[pos]
            if pos>=len(s):
                return 1
            prefix = s[pos]
            if prefix not in chars:
                return 0
            suffix = s[pos+1::]
            ans = 0
            if suffix and prefix + suffix[0] in chars:
                ans = backtrack(pos+1) + backtrack(pos+2)
            else:
                ans = backtrack(pos+1)
            memo[pos] = ans
            return memo[pos]
        return backtrack(0)


# Solution Roval T:O(N^2) S:O(N^2)
# 31-08-2022

class Solution:
    def numDecodings(self, s: str) -> int:
        memo = {}
        def backtrack(pos):
            if pos in memo:
                return memo[pos]
            if pos == len(s):
                return 1
            memo[pos] = 0
            if s[pos]=='0':
                return 0
            memo[pos] = backtrack(pos+1)
            if pos+1 <len(s) and 10<=int(s[pos:pos+2])<=26:
                memo[pos]+=backtrack(pos+2)
            return memo[pos]
        
        return backtrack(0)