# Solution Roval T:O(N*target) S:O(N*target)
# 10-09-2022

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        
        memo = dict()
        def backtrack(pos,total):
            if pos==len(nums):
                return int(total == target)
            if (pos,total) in memo:
                return memo[(pos,total)]
            memo[(pos,total)] = backtrack(pos+1,total+nums[pos])+backtrack(pos+1,total-nums[pos])
            return memo[(pos,total)]
        return backtrack(0,0)

# Roval 
# T:O(N*Target) S:O(N*Target)
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        dp = {}
        
        def finder(i,total):
            if i==len(nums):
                return 1 if total == target else 0
            if (i,total) in dp:
                return dp[(i,total)]
            
            dp[(i,total)] = finder(i+1,total+nums[i]) + finder(i+1,total-nums[i])
            
            return dp[(i,total)]
            
        finder(0,0)
        return dp[0,0]