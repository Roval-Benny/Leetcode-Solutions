# Solution Roval T:O(N*Sqrt(N)) S:O(N*Sqrt(N))
# 22-11-2022

class Solution:
    def numSquares(self, n: int) -> int:
        dp = [ i for i in range(n+1)]
        number = 2
        while number*number<=n:
            square = number*number
            for i in range(square,n+1):
                dp[i] = min(dp[i],dp[i-square]+1)
            number+=1
        return dp[-1]


#T:(sqrt(n)) S:O(1)
class Solution:
    def numSquares(self, n):
        if int(sqrt(n))**2 == n: return 1
        for j in range(int(sqrt(n)) + 1):
            if int(sqrt(n - j*j))**2 == n - j*j: return 2
            
        while n % 4 == 0: 
            n >>= 2
        if n % 8 == 7: return 4
        return 3