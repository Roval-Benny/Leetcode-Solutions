# Solution Roval T:O(N) S:O(1)
# 02-09-2022

class Solution:
    def trap(self, height: List[int]) -> int:
        left,leftMax,right,rightMax = 0,height[0],len(height)-1,height[-1]
        ans = 0
        while left<right:
            if height[left]<=height[right]:
                val = leftMax - height[left]
                if val>0:
                    ans+=val
                leftMax = max(leftMax,height[left])
                left+=1
            else:
                val = rightMax - height[right]
                if val>0:
                    ans+=val
                rightMax = max(rightMax,height[right])
                right-=1
        return ans

# Solution Roval T:O(N) S:O(N)
# 02-09-2022

class Solution:
    def trap(self, height: List[int]) -> int:
        ans = 0
        left = [0]*(len(height)+1)
        right = [0]*(len(height)+1)
        for index,val in enumerate(height):
            left[index+1] = max(left[index],val)
        for i in range(len(height)-1,-1,-1):
            right[i] = max(height[i],right[i+1])
        for index,val in enumerate(height):
            temp = min(right[index],left[index])-val
            if temp>0:
                ans+=temp
        return ans

# Solution Roval T:O(N) S:O(N)
# 11-08-2022
class Solution:
    def trap(self, height: List[int]) -> int:
        left = [0]*len(height)
        right = [0]*len(height)
        for i in range(1,len(height)):
            left[i] = max(left[i-1],height[i-1])
        for i in range(len(height)-2,-1,-1):
            right[i] = max(right[i+1],height[i+1])
        hold = 0
        for i in range(len(height)):
            tempH = min(left[i],right[i])-height[i]
            if tempH>0:
                hold+=tempH
        return hold