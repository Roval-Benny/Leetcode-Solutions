
# Solution Roval T:O(logN) S:O(1)
# 02-09-2022

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        start = 0
        end = len(nums)-1
        while start<=end:
            mid = (start+end)//2
            if nums[mid]==target:
                return mid
            elif nums[start]<=nums[mid]:
                if nums[start]<=target<=nums[mid]:
                    end = mid
                else:
                    start = mid+1
            else:
                if nums[mid]<=target<=nums[end]:
                    start = mid
                else:
                    end = mid-1
        return start if (start<len(nums) and nums[start]==target) else -1

# Solution Roval T:O(logN) S:O(1)
# 29-08-2022

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        start = 0
        end = len(nums)-1
        while start<end:
            mid = (start+end)//2
            if nums[mid]==target:
                return mid
            if nums[start]<=nums[mid]:
                if nums[start]<=target<=nums[mid]:
                    end = mid
                else:
                    start = mid+1
            else:
                if nums[mid]<target<=nums[end]:
                    start = mid
                else:
                    end = mid-1
        if nums[start]==target:
            return start
        return -1

# Solution Roval T:O(logN) S:O(1)
class Solution:
    def search(self, arr: List[int], target: int) -> int:
        start = 0
        end = len(arr)-1
        while(start<=end):
            mid = (start+end)//2
            if arr[mid]==target:
                return mid
            elif arr[start]>arr[mid] and target>=arr[start]:
                end = mid-1
            elif arr[end]<arr[mid] and target<=arr[end]:
                start = mid+1
            elif arr[mid]<=target:
                start = mid+1
            else:
                end = mid-1
        return -1

