# Solution Roval T:O(N) S:O(1)
# 14-10-2022

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head.next:
            return None
        slow = head
        fast = head.next
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
        slow.next = slow.next.next
        return head


# T:O(N) S:O(1)

# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head.next == None:
            return None
        f = head.next
        s = head
        p = None
        # while(f):
        #     if (f.next):
        #         f = f.next.next
        #     else:
        #         f = f.next
        #         p = s
        #         s = s.next
        #         break
        #     p = s
        #     s = s.next
        # p.next = p.next.next
        while f and f.next:
            f = f.next.next
            if f:
                s = s.next
        s.next = s.next.next
        return head
