# Solution Roval T:O(N) S:O(D) 
# 24-09-2022

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        ans = []
        
        def dfs(node,arr,total):
            if not node:
                return
            if not node.left and not node.right and node.val+total == targetSum:
                ans.append(arr+[node.val])
                return 
            if node.left:
                dfs(node.left,arr+[node.val],total+node.val)
            if node.right:
                dfs(node.right,arr+[node.val],total+node.val)
            return 
        dfs(root,[],0)
        return ans


# T:O(N) S:(D) d - depth

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.list = []
    
    def path(self,node,sum,target,arr):
        if not node:
            return
        arr.append(node.val)
        if node.val+sum == target and not node.left and not node.right:
            self.list.append(arr.copy())
        self.path(node.left,sum+node.val,target,arr)
        self.path(node.right,sum+node.val,target,arr)
        arr.pop(-1)
        
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        self.path(root,0,targetSum,[])
        return self.list