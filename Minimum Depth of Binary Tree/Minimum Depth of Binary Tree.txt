#T:O(D) S:O(D) D - depth of tree
# using global variable
class Solution:
    def __init__(self):
        self.counter = 99999999
    
    def checker(self,node,counter):
        if not node.left and not node.right:
            self.counter = min(self.counter,counter)
            return
        if node.left:
            self.checker(node.left,counter+1)
        if node.right:
            self.checker(node.right,counter+1)
    def minDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        self.checker(root,1)
        return self.counter


#T:O(D) S:(D) D - depth of tree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minFinder(self,root,depth):
        if not root:
            return depth
        if root.left and root.right:
            return min(self.minFinder(root.left,depth+1),self.minFinder(root.right,depth+1))
        if root.left:
            return self.minFinder(root.left,depth+1)
        if root.right:
            return self.minFinder(root.right,depth+1)
        return depth+1
    def minDepth(self, root: Optional[TreeNode]) -> int:
        return self.minFinder(root,0)